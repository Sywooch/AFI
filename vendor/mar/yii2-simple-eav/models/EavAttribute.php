<?php

namespace mar\eav\models;

use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "product_attribute".
 *
 * @property integer $id
 * @property integer $alias
 * @property string $name
 * @property string $label
 * @property boolean $searchable
 * @property boolean $is_numeric
 */
class EavAttribute extends \yii\db\ActiveRecord
{

    //todo: delete
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'eav_attribute';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['alias', 'name'], 'required'],
            [['name'], 'validateName'],
            [['searchable', 'is_numeric'], 'boolean'],
            [['name', 'label', 'alias'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'alias' => 'Alias класса',
            'name' => 'Имя свойства',
            'label' => 'Название свойства',
            'searchable' => 'Фильтрация по полю',
            'is_numeric' => 'Фильтровать, как числовое поле'
        ];
    }

    /** validate name, it will be a name of property of model */
    public function  validateName($attribute)
    {
        if (!preg_match('/^[a-zA-Z0-9-_]{3,200}$/', $this->$attribute)) {
            $this->addError($attribute, 'Name incorrect, use only latin characters, numbers and \'-\' or \'_\' symbols. Minimal length -3 , max - 16 ');
        }
    }


    /** return eav attribute value for current object
     * @param AcriveRecord /integer
     * @return mixed
     */
    public function getValue($object)
    {
        /** @var EavAttributeValue $attributeValue */
        if ($attributeValue = $this->getEavAttributeValueModel($object)) {
            return $attributeValue->value;
        } else {
            return null;
        }
    }

    /** set eav attribute value for current object
     * @param AcriveRecord /integer
     * @param mixed $value
     * @return boolean
     */
    public function setValue($object, $value)
    {
        /** @var EavAttributeValue $attributeValue */
        if ($attributeValue = $this->getEavAttributeValueModel($object)) {
            $attributeValue->value = $value;
            $result =  $attributeValue->save();
            return $result;
        }
        return false;
    }

    /**
     * @param $object ActiveRecord
     * @return EavAttributeValue/null
     * */
    protected function getEavAttributeValueModel($object)
    {
        $objectId = null;
        if (is_object($object) && isset($object->id)) {
            $objectId = $object->id;
        } else if (is_object($object) && !isset($object->id)) {
            return null;
        } else {
            $objectId = intval($object);
        }
        /** @var EavAttributeValue $attributeValue */
        $attributeValue = EavAttributeValue::find()->where([
            'attribute_id' => $this->id,
            'object_id' => $objectId,
        ])->one();
        if (!empty($attributeValue)) {
            return $attributeValue;
        } else {
            $attributeValue = new EavAttributeValue();
            $attributeValue->attribute_id = $this->id;
            $attributeValue->object_id = $objectId;
            if ($attributeValue->save()) {
                return $attributeValue;
            };
        }
        return null;
    }

    /** removing EavAttribute will remove all values of this attribute */
    public function beforeDelete()
    {
        EavAttributeValue::deleteAll(
            'attribute_id = :id', [':id' => $this->id]
        );
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }


}